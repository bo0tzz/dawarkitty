/*
 * API V1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`api_v1_countries_visited_cities_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV1CountriesVisitedCitiesGetError {
    Status400(models::ApiV1CountriesVisitedCitiesGet400Response),
    UnknownValue(serde_json::Value),
}


/// Returns a list of visited cities and countries based on tracked points within the specified date range
pub async fn api_v1_countries_visited_cities_get(configuration: &configuration::Configuration, api_key: &str, start_at: &str, end_at: &str) -> Result<models::ApiV1CountriesVisitedCitiesGet200Response, Error<ApiV1CountriesVisitedCitiesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_key = api_key;
    let p_start_at = start_at;
    let p_end_at = end_at;

    let uri_str = format!("{}/api/v1/countries/visited_cities", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("api_key", &p_api_key.to_string())]);
    req_builder = req_builder.query(&[("start_at", &p_start_at.to_string())]);
    req_builder = req_builder.query(&[("end_at", &p_end_at.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiV1CountriesVisitedCitiesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

