/*
 * API V1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiV1PhotosGet200ResponseInner {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "latitude")]
    pub latitude: f32,
    #[serde(rename = "longitude")]
    pub longitude: f32,
    #[serde(rename = "localDateTime")]
    pub local_date_time: String,
    #[serde(rename = "originalFileName")]
    pub original_file_name: String,
    #[serde(rename = "city")]
    pub city: String,
    #[serde(rename = "state")]
    pub state: String,
    #[serde(rename = "country")]
    pub country: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "orientation", skip_serializing_if = "Option::is_none")]
    pub orientation: Option<Orientation>,
    #[serde(rename = "source")]
    pub source: Source,
}

impl ApiV1PhotosGet200ResponseInner {
    pub fn new(id: String, latitude: f32, longitude: f32, local_date_time: String, original_file_name: String, city: String, state: String, country: String, r#type: Type, source: Source) -> ApiV1PhotosGet200ResponseInner {
        ApiV1PhotosGet200ResponseInner {
            id,
            latitude,
            longitude,
            local_date_time,
            original_file_name,
            city,
            state,
            country,
            r#type,
            orientation: None,
            source,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "image")]
    Image,
    #[serde(rename = "video")]
    Video,
}

impl Default for Type {
    fn default() -> Type {
        Self::Image
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Orientation {
    #[serde(rename = "portrait")]
    Portrait,
    #[serde(rename = "landscape")]
    Landscape,
}

impl Default for Orientation {
    fn default() -> Orientation {
        Self::Portrait
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "immich")]
    Immich,
    #[serde(rename = "photoprism")]
    Photoprism,
}

impl Default for Source {
    fn default() -> Source {
        Self::Immich
    }
}

