/*
 * API V1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiV1PhotosIdThumbnailGet200Response {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f32>,
    #[serde(rename = "longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f32>,
    #[serde(rename = "localDateTime", skip_serializing_if = "Option::is_none")]
    pub local_date_time: Option<String>,
    #[serde(rename = "originalFileName", skip_serializing_if = "Option::is_none")]
    pub original_file_name: Option<String>,
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "orientation", skip_serializing_if = "Option::is_none")]
    pub orientation: Option<Orientation>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
}

impl ApiV1PhotosIdThumbnailGet200Response {
    pub fn new() -> ApiV1PhotosIdThumbnailGet200Response {
        ApiV1PhotosIdThumbnailGet200Response {
            id: None,
            latitude: None,
            longitude: None,
            local_date_time: None,
            original_file_name: None,
            city: None,
            state: None,
            country: None,
            r#type: None,
            orientation: None,
            source: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "IMAGE")]
    Image,
    #[serde(rename = "VIDEO")]
    Video,
    #[serde(rename = "image")]
    Image2,
    #[serde(rename = "video")]
    Video2,
    #[serde(rename = "raw")]
    Raw,
    #[serde(rename = "live")]
    Live,
    #[serde(rename = "animated")]
    Animated,
}

impl Default for Type {
    fn default() -> Type {
        Self::Image
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Orientation {
    #[serde(rename = "portrait")]
    Portrait,
    #[serde(rename = "landscape")]
    Landscape,
}

impl Default for Orientation {
    fn default() -> Orientation {
        Self::Portrait
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "immich")]
    Immich,
    #[serde(rename = "photoprism")]
    Photoprism,
}

impl Default for Source {
    fn default() -> Source {
        Self::Immich
    }
}

